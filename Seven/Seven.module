<?php namespace ProcessWire;

/**
 * @property string apiKey
 * @property string mobilePhoneField
 * @property string sms_from
 */
class Seven extends Process implements ConfigurableModule {
    static protected $defaults = array(
        'apiKey' => '',
        'mobilePhoneField' => 'mobile_phone',
        'sms_from' => '',
    );
    /** @var array $moduleInfo */

    private static $placeholders = array('email');

    public function __construct() {
        parent::__construct();

        $this->setConfigurationDefaults();
    }

    private function setConfigurationDefaults() {
        // $this->$k will be set if the module data (json config in db) has saved values, if not we set the default
        foreach (self::$defaults as $k => $v) if (!isset($this->$k)) $this->set($k, $v);
    }

    /**
     * build module configuration fields
     * @param array $data module config array
     * @return InputfieldWrapper
     * @throws WireException
     * @throws WirePermissionException
     */
    public function getModuleConfigInputfields(array $data) {
        $fields = new InputfieldWrapper;
        $cfg = $this->getConfig($data);

        $fieldset = $this->wire('modules')->get('InputfieldFieldset');
        $fieldset->attr('name', 'general');
        $fieldset->icon = 'cog';
        $fieldset->label = $this->_('General');

        $field = $this->wire('modules')->get('InputfieldText');
        $field->attr('maxlength', 90);
        $field->attr('name', 'apiKey');
        $field->attr('required', 'required');
        $field->attr('value', $cfg['apiKey']);
        $field->description =
            $this->_('Required for sending - get yours @ https://www.seven.io');
        $field->label = $this->_('API Key');
        $fieldset->append($field);

        $field = $this->modules->get('InputfieldText');
        $field->attr('name', 'mobilePhoneField');
        $field->attr('required', 'required');
        $field->attr('value', $cfg['mobilePhoneField']);
        $field->description = $this->_('Field name holding the mobile phone number');
        $field->label = $this->_('Mobile Phone Field');
        $fieldset->append($field);

        $fields->append($fieldset);

        $fieldset = $this->modules->get('InputfieldFieldset');
        $fieldset->attr('name', 'sms');
        $fieldset->icon = 'envelope';
        $fieldset->label = $this->_('SMS');

        $fieldset->append($this->createFieldFrom($cfg));

        $fields->append($fieldset);

        return $fields;
    }

    private function getConfig($data = null) {
        if (null === $data) {
            $data = get_object_vars($this);
            $data = $data['data'];

            unset($data['submit_save_module'], $data['uninstall']);
        }

        return array_merge(self::$defaults, (array)$data);
    }

    private function createFieldFrom(array $cfg) {
        $field = $this->modules->get('InputfieldText');
        $field->attr('maxlength', 16);
        $field->attr('name', 'sms_from');
        $field->attr('value', $cfg['sms_from']);
        $field->description = $this->_('Sets the sender for outgoing SMS');
        $field->label = $this->_('From');
        $field->notes = $this->_('Max 16 numeric or 11 alphanumeric characters');

        return $field;
    }

    public function ready() {
        if (!$this->apiKey) return;

        $info = self::getModuleInfo();

        $this->config->js('Seven', array(
            'prompt_text' => $this->_('Please enter the message content.'),
            'text_missing' => $this->_('Not sending SMS: Missing text!'),
        ));

        $this->config->scripts->add(
            $this->config->urls->Seven . 'Seven.js?v=' . $info['version']);

        $this->addHookAfter('ProcessPageEdit::buildForm', $this, 'buildForm');

        $this->addHookAfter(
            'ProcessPageEdit::getSubmitActions', $this, 'getSubmitActions');

        $this->addHookAfter(
            'ProcessPageEdit::processSubmitAction', $this, 'processSubmitAction');
    }

    public static function getModuleInfo() {
        return array(
            'author' => 'seven communications GmbH & Co. KG, www.seven.io',
            'autoload' => true,
            'href' => 'https://github.com/seven-io/ProcessWire',
            'nav' => array(
                array(
                    'label' => __('Bulk SMS'),
                    'url' => 'bulk-sms',
                ),
            ),
            'page' => array(
                'name' => 'seven',
                'title' => 'Seven',
            ),
            'singular' => true,
            'summary' => __('Send SMS via seven.io.'),
            'title' => 'Seven',
            'version' => 200,
        );
    }

    public function execute() {
        return '
            <dl class="uk-description-list uk-description-list-divider">
                <dt>
                    <a href="/processwire/seven/bulk-sms/">
                        <i style="float: right;" class="fa fa-3x fa-fw fa-envelope ui-priority-secondary"></i>
                        ' . $this->_('Bulk SMS') . '
                    </a>
                </dt>
                <dd>' . $this->_('Send bulk SMS to all of your users') . '</dd>
            </dl>
        ';
    }

    public function executeBulkSms() {
        if ($this->input->is('post')) $this->sendBulkSms();

        /** @var InputfieldForm $form */
        $form = $this->modules->get('InputfieldForm');

        /** @var InputfieldFieldset $fieldset */
        $fieldset = $this->modules->get('InputfieldFieldset');
        $fieldset->label = $this->_('Filters');

        $f = $this->modules->get('InputfieldSelectMultiple');
        $f->attr('name', 'filter_user_role');
        $f->label = $this->_('Select the user roles to use');
        foreach ($this->wire('roles')->find('') as $role)
            $f->addOption($role->id, $role->name, array('selected' => 'selected'));
        $fieldset->add($f);

        $form->append($fieldset);

        $cfg = $this->getConfig();

        $form->add($this->createFieldFrom($cfg));

        $f = $this->modules->get('InputfieldTextarea');
        $f->attr('maxlength', 1520);
        $f->attr('name', 'text');
        $f->attr('required', 'required');
        $f->description = $this->_('Sets the message content');
        $f->label = $this->_('Text');
        $f->notes = $this->_('Max 1520 characters');
        $form->add($f);

        /** @var InputfieldSubmit $f */
        $f = $this->modules->get('InputfieldSubmit');
        $f->attr('name', 'send_bulk_sms');
        $f->attr('value', $this->_('Send'));
        $form->add($f);

        return $form->render();
    }

    private function sendBulkSms() {
        $selectors = array($this->mobilePhoneField . '!=""');

        $userRoles = $this->input->post('filter_user_role');
        if (isset($userRoles)) $selectors[] = 'roles=' . implode('|', $userRoles);

        $users = $this->users->find(implode(',', $selectors));

        if (0 === $users->count) {
            $this->wire->log->warning($this->_('No recipients found.'), true);
            return;
        }

        $responses = array();
        $from = $this->input->post('sms_from');

        foreach ($users as $user) {
            $text = $this->input->post('text');

            foreach (self::$placeholders as $placeholder) $text = str_replace(
                '{{' . $placeholder . '}}', $user->$placeholder, $text);

            $responses[] = $this->sms(array(
                'from' => $from,
                'text' => $text,
                'to' => $user->{$this->mobilePhoneField},
            ), false);
        }

        $this->wire->log->message(implode(PHP_EOL, $responses), true);
    }

    private function sms(array $payload, $log = true) {
        return $this->post('sms', $payload, $log);
    }

    private function post($endpoint, array $payload, $log = true) {
        if ('' === $this->apiKey) {
            $e = $this->_('Not sending: Missing API key!');
            if ($log) $this->wire->log->error($e, true);
            return $e;
        }

        $http = new WireHttp;
        $res = $http->setHeaders(array(
            'SentWith' => 'ProcessWire',
            'X-Api-Key' => $this->apiKey,
        ))->post('https://gateway.seven.io/api/' . $endpoint, array_merge($payload, array(
            'json' => 1,
        )));

        if (false === $res) {
            $e = (string)$http->getError();
            if ($log) $this->wire->log->error($e, true);
            return $e;
        }

        $res = (string)$res;
        if ($log) $this->wire->log->message($res, true);
        return $res;
    }

    public function buildForm(HookEvent $e) {
        $field = $this->modules->get('InputfieldHidden');
        $field->attr('name', 'seven_text');
        $field->attr('value', '');

        $e->return->add($field);
    }

    public function getSubmitActions(HookEvent $e) {
        if (!$e->process->getPage() instanceof User) return;

        $actions = $e->return;

        unset($actions['next']);

        $e->return = array_merge($actions, array('sms' => array(
            'icon' => 'envelope',
            'label' => $this->_('SMS'),
            'value' => 'seven_sms_user',
        )));
    }

    public function processSubmitAction(HookEvent $e) {
        if ('seven_sms_user' !== $e->arguments(0)) return;

        $page = $e->process->getPage();
        if (!$page instanceof User) return;

        $from = $this->sms_from;
        $text = $e->process->input->post->get('seven_text');
        $to = $e->user->get($this->mobilePhoneField);

        foreach (array('email') as $key) $text = str_replace(
            '{{' . $key . '}}', $e->user->get($key), $text);

        $this->sms(compact('from', 'text', 'to'));

        $this->wire->session->redirect($page->editUrl);
    }
}
